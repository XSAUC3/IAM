/*
1. Check whether user name with their password is in KIAM, if yes authenticate and get roles
If the user is missing in KIAM other system, get user from there, get roles list and update our system
2. For each resource in calling request
3. Parse the resource string to get application_id and resource , resource type
4. Get list of policies where resource is in policy target and role in policy principal for specific application id
5. previlige value = (value of action for a resource) And (Parse the contraint())
6. Store the previlige value for that resource and actionn
7. End For each
8. Get user_return_attributes from PIP database
9. Return the json with resource values and additional values as requested

Parsing constraint()
{
Pick the text content
check for #variables
If the #variable is fixed then pick from resource schema
If the #variable is dynamic then first check if it is provided in request. If not then pick from PIP system
Eval the javascript and return the value
}
*/
/*
Assumptions - Please document here

*. User data in KIAM system

*. PIP database

*/



//Activity 1

//Create Jsonobject from incoming request
var jsonObject = {
    "username": "Laxmikant",
    "password": "laxmikant124",
    "resource": [
      {
        "resource_id": "application_id/resource_type/resource",
        "action": "view",
        "resource_return_attributes": [
          "a",
          "b"
        ]
      },
      {
        "resource_id": "application_id/resource_type/resource",
        "action": "view"
      },
      {
        "resource_id": "application_id/resource_type/resource",
        "action": "view",
        "resource_return_attributes": [
          "a",
          "b"
        ]
      }
    ],
    "user_return_attributes": [
      "a",
      "b"
    ],
    "adusername": "AARNOLD",
    "teammateId": "408483",
    "firstName": "Amanda",
    "lastName": "Arnold",
    "businessEntity": "Kavalus INC.",
    "titleEntitlementProfileName": "Project Coordinator",
    "titleAbbreviation": "CC",
    "jobCode": "O328",
    "jobTitle": "Project Coordinator",
    "jobDescription": "Project Coordinator"
  };

  
//Get connection to DB , common code

//Activity 2 User Authentication Module 
//Along with user credentials, also fetch and store roles 

var userAuthenticated = false;

if(!userExistsInKIAM()) { //This function will check whether username and password exists within KIAM
    try {
        fetchUserDetailsFromUserStore(); //This function will also store the user locally within KIAM
    }
    catch(userDoesNotExist()) {
        return; //Error user does not exist in either system.
    }
} 
try {s
    userAuthenticated = authenticateUserLocally(); 
} catch (AuthenticationFailedException()) {
    return; //User authentication failed
}

//Activity 2 Create a principal Object from incoming request 

principalUser = username;
Role principalRoles[] = fetchRolesForUser(username);

principalObject.addUser(principalUser);

for(role in principalRole) {
    principalObject.addRole(role);
}

// Fetch User profile attributes
//To be clubbed with 2 and presume from a PIP
//Presume principal object will need to be passed 

//userProfileAttributes[] = fetchUserDetailsFromKIAM();
//This is from user table
for(profileAttribute in fetchUserDetailsFromKIAM()) {
    environmentAttributes.store(profileAttribute , value);
}

//Activity 3 Identify applicable policies for roles --This will have a list of policies for applicable roles
//Principal object will need to be passed as it has the roles
var applicablePolicies[];

for(role in principalRole) {
    applicablePolicies.add(identifyPoliciesForPrincipalRoles(role));
}
//Have commented below as we are assuming to work on roles ininitial version.
// applicablePolicies.add(identifyPoliiesForPrincipalUser(username));

//Further refine list of applicable policies based on resources

 for(resource in jsonObject.resource) {
    if (applicablepolicies.resourceExists(resource)){
       FinalPolicies.addPolicy(policy);
    }
 }

//Identify attributes required for applicable policies
// retrievedPolicyAttribute is referrig to #variables in contraint text of each policy

Attributes policyAttributes[]
for(policy in FinalPolicies) {
    for(retrievedPolicyAttribute in policyConstraintAttributes(policy)) {
     policyAttributes.add(retrievedPolicyAttribute , type , value)
    }
}

//Some array operations
dynamicPolicyAttributes = policyAttributes - fixedPolicyAttributes;

//Identify attributes to be fetched from PIP for the user
Attributes pipAttributesToBeFetched[] = dynamicPolicyAttributes - environmentAttributes;
pipAttributes = retrieveAttributesFromPIP(pipAttributesToBeFetched);
for(attribute in pipAttributesToBeFetched) {
    environmentAttributes.add(attribute , value);
}

//Create a response object and add resouce return attributes to it
//TODO

//4. Filter applicable Policies based on conditions
//i.e further flter policy based on evaluation of text constraint as true or false
Policy filteredApplicablePolicies[];

for(policy in finalPolicy) {
    if(evaluateConstraintForPolicy(policy,environmentAttributes)) { //This function evaluates policies based on attribute values available in the environment variable.
        filteredApplicablePolicies.add(policy);
    }
}
//Activity 4
//Evaluate whether user should have access
finalprivilege = false;
for(resource in jsonObject.resource) {
    for(policy in filteredApplicablePolicies) {
        policyType = getPolicyType(); //Retreieve whether policy is grant or deny policy
        if(policyType is Deny) {
            privilege = false;
        } else {
            privilege = true;
        }//TODO - Review logic
    
        //
        var resourceAction = jsonObject.resource.action
        //Why do we need to send environAttributes as only the existence of action is to be checked
        finalPrivilege = policy.evaluatePolicy(environmentAttributes,resourceAction) && privilege;
    
        //prepareResponseAndReturn(resource , finalPrivilege);
        responseObject.add(resource, finalprivilege, environmentAttributes);
        
    }    
}

//returnPrepareResponseAndReturn(finalPrivilege);
returnPrepareResponseAndReturn(jsonObject, reponseObject, environmentAttributes)

function returnPrepareResponseAndReturn(privilege: boolean) {
    responseAttributes[];
    if(privilege) {
        for(returnAttribute in returnAttributeList) {
            responseAttributes.add(environmentAttributes.get(returnAttribute));
        }
    }
    return (new Response(responseAttributes,privilege));
}

function prepareResponseAndReturn(privileges) {

}

function evaluatePolicy() {

}

function evaluateConstraintForPolicy(policy,environmentAttributes) {
//Take constraint into var and parse
//Evaluate

}


